import logging
import asyncio
import pyodbc
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router
from dotenv import load_dotenv
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

router = Router()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv()
API_TOKEN = os.getenv('TOKEN')
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
dp.include_router(router)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_to_db():
    try:
        driver = os.getenv("DB_DRIVER")
        server = os.getenv("DB_SERVER")
        database = os.getenv("DB_NAME")
        username = os.getenv("DB_USER")
        password = os.getenv("DB_PASSWORD")
        trust_cert = os.getenv("DB_TRUST_CERT")
        conn = pyodbc.connect(
            f"DRIVER={{{driver}}};"
            f"SERVER={server};"
            f"DATABASE={database};"
            f"UID={username};"
            f"PWD={password};"
            f"TrustServerCertificate={trust_cert}"
        )
        return conn
    except pyodbc.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def check_user_exists(telegram_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT 1 FROM Users WHERE telegram_id = ?", (telegram_id,))
            return cursor.fetchone() is not None
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()
    return False

def add_user(telegram_id, first_name, last_name, username, admin=0):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO Users (telegram_id, first_name, last_name, username, admin) VALUES (?, ?, ?, ?, ?)",
                (telegram_id, first_name, last_name, username, admin)
            )
            conn.commit()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} (ID: {telegram_id}) –¥–æ–±–∞–≤–ª–µ–Ω.")
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()

def is_admin(telegram_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT admin FROM Users WHERE telegram_id = ?", (telegram_id,))
            result = cursor.fetchone()
            admin_status = result and result[0] == 1
            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è ID {telegram_id}: {'–ê–¥–º–∏–Ω' if admin_status else '–ù–µ –∞–¥–º–∏–Ω'}")
            return admin_status
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è ID {telegram_id}: {e}")
            return False
        finally:
            conn.close()
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ ID {telegram_id}")
    return False

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class RoomState(StatesGroup):
    viewing_rooms = State()

class AdminState(StatesGroup):
    waiting_for_broadcast = State()

class DBAdminState(StatesGroup):
    waiting_for_add_user = State()
    waiting_for_edit_user = State()
    waiting_for_delete_user = State()
    waiting_for_add_room = State()
    waiting_for_edit_room = State()
    waiting_for_delete_room = State()
    waiting_for_add_image = State()
    waiting_for_edit_image = State()
    waiting_for_delete_image = State()
    waiting_for_room_edit_gui = State()
    waiting_for_user_edit_gui = State()
    waiting_for_image_edit_gui = State()
    waiting_for_add_guest = State()
    waiting_for_edit_guest = State()
    waiting_for_delete_guest = State()
    waiting_for_guest_edit_gui = State()
    waiting_for_add_service = State()
    waiting_for_edit_service = State()
    waiting_for_delete_service = State()
    waiting_for_add_guest_service = State()
    waiting_for_edit_guest_service = State()
    waiting_for_delete_guest_service = State()
    waiting_for_service_edit_gui = State()
    waiting_for_guest_service_edit_gui = State()

class GuestRegistrationState(StatesGroup):
    waiting_for_room_id = State()
    waiting_for_telegram_id = State()
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_email = State()
    waiting_for_phone = State()
    waiting_for_check_in_date = State()
    waiting_for_check_out_date = State()
    waiting_for_comment = State()

class BookingState(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_email = State()
    waiting_for_phone = State()
    waiting_for_check_in_date = State()
    waiting_for_check_out_date = State()
    waiting_for_comment = State()

class OrderServiceState(StatesGroup):
    waiting_for_quantity = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–æ–º "–ú–æ–∏ —É—Å–ª—É–≥–∏"
@dp.message(Command("start"))
async def start(message: types.Message):
    telegram_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name or ""
    username = message.from_user.username or ""
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞", callback_data="show_rooms")],
        [InlineKeyboardButton(text="–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="my_bookings")],
        [InlineKeyboardButton(text="–ú–æ–∏ —É—Å–ª—É–≥–∏", callback_data="my_services")],
        [InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã", callback_data="reviews")],
        [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="additional_services")],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="tech_support")]
    ])
    if not check_user_exists(telegram_id):
        add_user(telegram_id, first_name, last_name, username)
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=markup)
    else:
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å.", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /rooms
@dp.message(Command("rooms"))
async def rooms(message: types.Message, state: FSMContext):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT category FROM Rooms WHERE status = 'available' AND quantity > 0")
            categories = [row.category for row in cursor.fetchall()]
            if categories:
                await state.update_data(categories=categories, current_category_index=0)
                await show_category(message.chat.id, state)
            else:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç.")
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–æ–º–µ—Ä–æ–≤: {e}")
        finally:
            conn.close()

async def show_category(chat_id, state: FSMContext):
    data = await state.get_data()
    categories = data.get('categories', [])
    current_category_index = data.get('current_category_index', 0)
    if not categories:
        logging.error("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    current_category = categories[current_category_index]
    logging.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {current_category}, –∏–Ω–¥–µ–∫—Å: {current_category_index}")
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT room_id, description, price FROM Rooms WHERE category = ? AND status = 'available' AND quantity > 0", (current_category,))
            rooms = cursor.fetchall()
            if rooms:
                media = []
                for room in rooms:
                    cursor.execute("SELECT image_url FROM RoomImages WHERE room_id = ?", (room.room_id,))
                    images = [row.image_url for row in cursor.fetchall()]
                    if images:
                        media.append(InputMediaPhoto(
                            media=images[0],
                            caption=f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {current_category}\n<b>–¶–µ–Ω–∞: $</b> {room.price}\n{room.description}",
                            parse_mode="HTML"
                        ))
                        media.extend([InputMediaPhoto(media=img) for img in images[1:]])
                if media:
                    markup = InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="<<", callback_data="prev_category"),
                        InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{rooms[0].room_id}"),
                        InlineKeyboardButton(text=">>", callback_data="next_category")
                    ]])
                    media_messages = await bot.send_media_group(chat_id, media)
                    media_message_ids = [msg.message_id for msg in media_messages]
                    sent_message = await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëá", reply_markup=markup)
                    await state.update_data(last_text_message_id=sent_message.message_id, media_message_ids=media_message_ids)
                else:
                    logging.warning(f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {current_category}")
                    await bot.send_message(chat_id, "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            else:
                logging.warning(f"–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {current_category}")
                await bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤: {e}")
        finally:
            conn.close()

async def update_category(chat_id, state: FSMContext):
    data = await state.get_data()
    media_message_ids = data.get("media_message_ids", [])
    last_text_message_id = data.get("last_text_message_id")
    for message_id in media_message_ids:
        try:
            await bot.delete_message(chat_id, message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞—Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
    if last_text_message_id:
        try:
            await bot.delete_message(chat_id, last_text_message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {last_text_message_id}: {e}")
    await show_category(chat_id, state)

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
async def show_db_menu(chat_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="db_users")],
        [InlineKeyboardButton(text="–ù–æ–º–µ—Ä–∞", callback_data="db_rooms")],
        [InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="db_images")],
        [InlineKeyboardButton(text="–ì–æ—Å—Ç–∏", callback_data="db_guests")],
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏", callback_data="db_services")],
        [InlineKeyboardButton(text="–ì–æ—Å—Ç–µ–≤—ã–µ —É—Å–ª—É–≥–∏", callback_data="db_guest_services")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_apanel")]
    ])
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)

async def show_users_menu(chat_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö", callback_data="view_users")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")],
        [InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É", callback_data="edit_user")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user_menu")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
    ])
    await bot.send_message(chat_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π Users:", reply_markup=markup)

async def show_rooms_menu(chat_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä–∞", callback_data="view_rooms")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="add_room")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="edit_room")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="delete_room_menu")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
    ])
    await bot.send_message(chat_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π Rooms:", reply_markup=markup)

async def show_images_menu(chat_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="view_images")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="add_image")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="delete_image_menu")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
    ])
    await bot.send_message(chat_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π RoomImages:", reply_markup=markup)

async def show_guests_menu(chat_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Å—Ç–µ–π", callback_data="view_guests")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è", callback_data="add_guest")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Å—Ç—è", callback_data="edit_guest")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≥–æ—Å—Ç—è", callback_data="delete_guest_menu")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
    ])
    await bot.send_message(chat_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π Guests:", reply_markup=markup)

async def show_services_menu(chat_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏", callback_data="view_services")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="add_service")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É", callback_data="edit_service")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="delete_service")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
    ])
    await bot.send_message(chat_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π Services:", reply_markup=markup)

async def show_guest_services_menu(chat_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data="view_guest_services")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="add_guest_service")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_guest_service")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="delete_guest_service")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
    ])
    await bot.send_message(chat_id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π GuestServices:", reply_markup=markup)

async def view_db_users(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT telegram_id, first_name, last_name, username, admin FROM Users")
            users = cursor.fetchall()
            if not users:
                await bot.send_message(chat_id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for user in users:
                admin_status = "üëë" if user.admin else ""
                text += f"ID: {user.telegram_id}, –ò–º—è: {user.first_name} {user.last_name}, Username: {user.username}, –ê–¥–º–∏–Ω: {admin_status}\n"
            await bot.send_message(chat_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def view_db_rooms(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT room_id, category, description, price, quantity, status FROM Rooms")
            rows = cursor.fetchall()
            if not rows:
                await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä–∞–º.")
            else:
                text = "–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤:\n"
                for row in rows:
                    text += f"ID: {row.room_id}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row.category}\n–¶–µ–Ω–∞: {row.price} —Ä—É–±.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {row.quantity}\n–°—Ç–∞—Ç—É—Å: {row.status}\n====================\n"
                await bot.send_message(chat_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä–∞–º.")
        finally:
            conn.close()

async def view_db_images(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT room_id, image_url FROM RoomImages")
            rows = cursor.fetchall()
            if not rows:
                await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.")
            else:
                text = "–°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n"
                for row in rows:
                    text += f"Room ID: {row.room_id}, URL: {row.image_url}\n"
                await bot.send_message(chat_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.")
        finally:
            conn.close()

async def view_db_guests(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT guest_id, room_id, telegram_id, first_name, last_name, check_in_date, check_out_date FROM Guests")
            guests = cursor.fetchall()
            if not guests:
                await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Å—Ç—è–º.")
            else:
                text = "–°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π:\n"
                for guest in guests:
                    text += f"ID: {guest.guest_id}, –ö–æ–º–Ω–∞—Ç–∞: {guest.room_id}, Telegram ID: {guest.telegram_id}, –ò–º—è: {guest.first_name} {guest.last_name}, –ó–∞–µ–∑–¥: {guest.check_in_date}, –í—ã–µ–∑–¥: {guest.check_out_date}\n"
                await bot.send_message(chat_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Å—Ç–µ–π: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Å—Ç—è–º.")
        finally:
            conn.close()

async def view_db_services(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT service_id, name, price, short_description FROM Services")
            services = cursor.fetchall()
            if not services:
                await bot.send_message(chat_id, "–ù–µ—Ç —É—Å–ª—É–≥.")
                return
            text = "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:\n"
            for service in services:
                text += f"ID: {service.service_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {service.name}, –¶–µ–Ω–∞: {service.price} —Ä—É–±., –û–ø–∏—Å–∞–Ω–∏–µ: {service.short_description}\n"
            await bot.send_message(chat_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def view_db_guest_services(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT g.first_name, g.last_name, s.name, gs.quantity, gs.order_date, gs.status
                FROM GuestServices gs
                JOIN Guests g ON gs.guest_id = g.guest_id
                JOIN Services s ON gs.service_id = s.service_id
            """)
            records = cursor.fetchall()
            if not records:
                await bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ GuestServices.")
            else:
                text = "–°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–≤—ã—Ö —É—Å–ª—É–≥:\n"
                for record in records:
                    text += (f"–ì–æ—Å—Ç—å: {record.first_name} {record.last_name}, –£—Å–ª—É–≥–∞: {record.name}, "
                             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {record.quantity}, –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {record.order_date}, –°—Ç–∞—Ç—É—Å: {record.status}\n")
                await bot.send_message(chat_id, text)
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö GuestServices: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è GUI —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def show_users_for_delete(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT telegram_id, first_name FROM Users")
            users = cursor.fetchall()
            if not users:
                await bot.send_message(chat_id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ ID", callback_data="delete_user_id")]
            ] + [
                [InlineKeyboardButton(text=f"{user.first_name} (ID: {user.telegram_id})", callback_data=f"delete_user_{user.telegram_id}")]
                for user in users
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_rooms_for_delete(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT room_id, category FROM Rooms")
            rooms = cursor.fetchall()
            if not rooms:
                await bot.send_message(chat_id, "–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ ID", callback_data="delete_room_id")]
            ] + [
                [InlineKeyboardButton(text=f"ID: {room.room_id} - {room.category}", callback_data=f"delete_room_{room.room_id}")]
                for room in rooms
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_guests_for_delete(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT guest_id, first_name, last_name FROM Guests")
            guests = cursor.fetchall()
            if not guests:
                await bot.send_message(chat_id, "–ù–µ—Ç –≥–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ ID", callback_data="delete_guest_id")]
            ] + [
                [InlineKeyboardButton(text=f"ID: {guest.guest_id} - {guest.first_name} {guest.last_name}", callback_data=f"delete_guest_{guest.guest_id}")]
                for guest in guests
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—Ç—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_rooms_for_image_delete(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT room_id FROM RoomImages")
            rooms = cursor.fetchall()
            if not rooms:
                await bot.send_message(chat_id, "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ room_id –∏ URL", callback_data="delete_image_id")]
            ] + [
                [InlineKeyboardButton(text=f"Room ID: {room.room_id}", callback_data=f"select_room_image_{room.room_id}")]
                for room in rooms
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_images_for_delete(chat_id, room_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT image_url FROM RoomImages WHERE room_id = ?", (room_id,))
            images = cursor.fetchall()
            if not images:
                await bot.send_message(chat_id, f"–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ID {room_id}.")
                return
            buttons = [
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ room_id –∏ URL", callback_data="delete_image_id")]
            ] + [
                [InlineKeyboardButton(text=f"URL: {image.image_url[:20]}...", callback_data=f"delete_image_{room_id}_{image.image_url}")]
                for image in images
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="delete_image_gui")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ ID {room_id}:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ID {room_id}: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_services_for_edit(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT service_id, name FROM Services")
            services = cursor.fetchall()
            if not services:
                await bot.send_message(chat_id, "–ù–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text=f"ID: {service.service_id} - {service.name}", callback_data=f"edit_service_gui_{service.service_id}")]
                for service in services
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_services_for_delete(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT service_id, name FROM Services")
            services = cursor.fetchall()
            if not services:
                await bot.send_message(chat_id, "–ù–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text=f"ID: {service.service_id} - {service.name}", callback_data=f"delete_service_{service.service_id}")]
                for service in services
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_guest_services_for_edit(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT guest_id, service_id, order_date, quantity, status FROM GuestServices")
            records = cursor.fetchall()
            if not records:
                await bot.send_message(chat_id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(
                    text=f"–ì–æ—Å—Ç—å: {record.guest_id}, –£—Å–ª—É–≥–∞: {record.service_id}, –î–∞—Ç–∞: {record.order_date}",
                    callback_data=f"edit_gs_{record.guest_id}_{record.service_id}_{record.order_date.isoformat()}"
                )] for record in records
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ GuestServices: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_guest_services_for_delete(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT guest_id, service_id, order_date FROM GuestServices")
            records = cursor.fetchall()
            if not records:
                await bot.send_message(chat_id, "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(
                    text=f"–ì–æ—Å—Ç—å: {record.guest_id}, –£—Å–ª—É–≥–∞: {record.service_id}, –î–∞—Ç–∞: {record.order_date}",
                    callback_data=f"delete_gs_{record.guest_id}_{record.service_id}_{record.order_date.isoformat()}"
                )] for record in records
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ GuestServices: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è GUI-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def show_rooms_for_edit(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT room_id, category FROM Rooms")
            rooms = cursor.fetchall()
            if not rooms:
                await bot.send_message(chat_id, "–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text=f"ID: {room.room_id} - {room.category}", callback_data=f"edit_room_gui_{room.room_id}")]
                for room in rooms
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_users_for_edit(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT telegram_id, first_name FROM Users")
            users = cursor.fetchall()
            if not users:
                await bot.send_message(chat_id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text=f"{user.first_name} (ID: {user.telegram_id})", callback_data=f"edit_user_gui_{user.telegram_id}")]
                for user in users
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_images_for_edit(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT room_id, image_url FROM RoomImages")
            images = cursor.fetchall()
            if not images:
                await bot.send_message(chat_id, "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text=f"Room ID: {image.room_id}, URL: {image.image_url}", callback_data=f"edit_image_gui_{image.room_id}_{image.image_url}")]
                for image in images
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

async def show_guests_for_edit(chat_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT guest_id, first_name, last_name FROM Guests")
            guests = cursor.fetchall()
            if not guests:
                await bot.send_message(chat_id, "–ù–µ—Ç –≥–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            buttons = [
                [InlineKeyboardButton(text=f"ID: {guest.guest_id} - {guest.first_name} {guest.last_name}", callback_data=f"edit_guest_gui_{guest.guest_id}")]
                for guest in guests
            ]
            buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—Ç—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π: {e}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def add_user_db(telegram_id, first_name, last_name, username, admin):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO Users (telegram_id, first_name, last_name, username, admin) VALUES (?, ?, ?, ?, ?)",
                (telegram_id, first_name, last_name, username, admin)
            )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()
    return False

def edit_user_db(telegram_id, admin):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("UPDATE Users SET admin = ? WHERE telegram_id = ?", (admin, telegram_id))
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()
    return False

def delete_user_db(telegram_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM Users WHERE telegram_id = ?", (telegram_id,))
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()
    return False

def add_room_db(category, description, price, quantity, status):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO Rooms (category, description, price, quantity, status) VALUES (?, ?, ?, ?, ?)",
                (category, description, price, quantity, status)
            )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞: {e}")
        finally:
            conn.close()
    return False

def edit_room_db(room_id, category, description, price, quantity, status):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE Rooms SET category = ?, description = ?, price = ?, quantity = ?, status = ? WHERE room_id = ?",
                (category, description, price, quantity, status, room_id)
            )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞: {e}")
        finally:
            conn.close()
    return False

def delete_room_db(room_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM Rooms WHERE room_id = ?", (room_id,))
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞: {e}")
        finally:
            conn.close()
    return False

def add_image_db(room_id, image_url):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO RoomImages (room_id, image_url) VALUES (?, ?)",
                (room_id, image_url)
            )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        finally:
            conn.close()
    return False

def edit_image_db(room_id, old_url, new_url):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE RoomImages SET image_url = ? WHERE room_id = ? AND image_url = ?",
                (new_url, room_id, old_url)
            )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        finally:
            conn.close()
    return False

def delete_image_db(room_id, image_url):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM RoomImages WHERE room_id = ? AND image_url = ?", (room_id, image_url))
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        finally:
            conn.close()
    return False

def add_service_db(name, price, short_description, detailed_description):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO Services (name, price, short_description, detailed_description) VALUES (?, ?, ?, ?)",
                (name, price, short_description, detailed_description)
            )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        finally:
            conn.close()
    return False

def edit_service_db(service_id, name, price, short_description, detailed_description):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE Services SET name = ?, price = ?, short_description = ?, detailed_description = ? WHERE service_id = ?",
                (name, price, short_description, detailed_description, service_id)
            )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        finally:
            conn.close()
    return False

def delete_service_db(service_id):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM Services WHERE service_id = ?", (service_id,))
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        finally:
            conn.close()
    return False

def add_guest_service_db(guest_id, service_id, quantity, status):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO GuestServices (guest_id, service_id, quantity, order_date, status) VALUES (?, ?, ?, GETDATE(), ?)",
                (guest_id, service_id, quantity, status)
            )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ GuestServices: {e}")
        finally:
            conn.close()
    return False

def edit_guest_service_db(guest_id, service_id, order_date, field, value):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            if field == "quantity":
                cursor.execute(
                    "UPDATE GuestServices SET quantity = ? WHERE guest_id = ? AND service_id = ? AND order_date = ?",
                    (int(value), guest_id, service_id, order_date)
                )
            elif field == "status":
                cursor.execute(
                    "UPDATE GuestServices SET status = ? WHERE guest_id = ? AND service_id = ? AND order_date = ?",
                    (value, guest_id, service_id, order_date)
                )
            conn.commit()
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ GuestServices: {e}")
        finally:
            conn.close()
    return False

def delete_guest_service_db(guest_id, service_id, order_date):
    conn = connect_to_db()
    if conn:
        try:
            logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ GuestServices: guest_id={guest_id}, service_id={service_id}, order_date={order_date}")
            cursor = conn.cursor()
            cursor.execute(
                "DELETE FROM GuestServices WHERE guest_id = ? AND service_id = ? AND order_date = ?",
                (guest_id, service_id, order_date)
            )
            conn.commit()
            return cursor.rowcount > 0
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ GuestServices: {e}")
            return False
        finally:
            conn.close()
    return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
async def show_services_list(message: types.Message, state: FSMContext):
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT service_id, name, price, short_description FROM Services")
            services = cursor.fetchall()
            if services:
                buttons = [
                    [InlineKeyboardButton(text=f"{service.name} - {service.price} —Ä—É–±.", callback_data=f"select_service_{service.service_id}")]
                    for service in services
                ]
                buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")])
                markup = InlineKeyboardMarkup(inline_keyboard=buttons)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —É—Å–ª—É–≥—É:", reply_markup=markup)
            else:
                await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥.")
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥.")
        finally:
            conn.close()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# Callback-—Ö–µ–Ω–¥–ª–µ—Ä
@router.callback_query()
async def handle_callback(callback_query: CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    data_state = await state.get_data()
    categories = data_state.get("categories", [])
    current_category_index = data_state.get("current_category_index", 0)
    try:
        if callback_query.data == "prev_category":
            if categories:
                current_category_index = (current_category_index - 1) % len(categories)
                await state.update_data(current_category_index=current_category_index)
                await update_category(chat_id, state)
            else:
                await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        elif callback_query.data == "next_category":
            if categories:
                current_category_index = (current_category_index + 1) % len(categories)
                await state.update_data(current_category_index=current_category_index)
                await update_category(chat_id, state)
            else:
                await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        elif callback_query.data.startswith("book_"):
            room_id = callback_query.data.split("_")[1]
            if room_id.isdigit():
                room_id = int(room_id)
                conn = connect_to_db()
                if conn:
                    try:
                        cursor = conn.cursor()
                        cursor.execute("SELECT quantity FROM Rooms WHERE room_id = ? AND status = 'available'", (room_id,))
                        result = cursor.fetchone()
                        if result and result.quantity > 0:
                            await state.update_data(room_id=room_id, telegram_id=callback_query.from_user.id)
                            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
                            await state.set_state(BookingState.waiting_for_first_name)
                        else:
                            await callback_query.message.answer("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                    except pyodbc.Error as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–Ω–∞—Ç—ã: {e}")
                        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
                    finally:
                        conn.close()
        elif callback_query.data == "show_rooms":
            await rooms(callback_query.message, state)
        elif callback_query.data == "my_bookings":
            telegram_id = callback_query.from_user.id
            conn = connect_to_db()
            if conn:
                try:
                    cursor = conn.cursor()
                    cursor.execute("SELECT guest_id, room_id, check_in_date, check_out_date FROM Guests WHERE telegram_id = ?", (telegram_id,))
                    bookings = cursor.fetchall()
                    if not bookings:
                        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
                    else:
                        text = "–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                        for booking in bookings:
                            text += f"ID –±—Ä–æ–Ω–∏: {booking.guest_id}, –ö–æ–º–Ω–∞—Ç–∞ ID: {booking.room_id}, –ó–∞–µ–∑–¥: {booking.check_in_date}, –í—ã–µ–∑–¥: {booking.check_out_date}\n"
                        await callback_query.message.answer(text)
                except pyodbc.Error as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
                    await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
                finally:
                    conn.close()
        elif callback_query.data == "my_services":
            telegram_id = callback_query.from_user.id
            conn = connect_to_db()
            if conn:
                try:
                    cursor = conn.cursor()
                    cursor.execute("SELECT guest_id FROM Guests WHERE telegram_id = ? AND check_out_date >= GETDATE()", (telegram_id,))
                    guest = cursor.fetchone()
                    if guest:
                        guest_id = guest.guest_id
                        cursor.execute("""
                            SELECT s.name, gs.quantity, gs.order_date, gs.status
                            FROM GuestServices gs
                            JOIN Services s ON gs.service_id = s.service_id
                            WHERE gs.guest_id = ?
                        """, (guest_id,))
                        services = cursor.fetchall()
                        if services:
                            text = "–í–∞—à–∏ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:\n"
                            for service in services:
                                text += f"–£—Å–ª—É–≥–∞: {service.name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {service.quantity}, –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {service.order_date}, –°—Ç–∞—Ç—É—Å: {service.status}\n"
                            await callback_query.message.answer(text)
                        else:
                            await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥.")
                    else:
                        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
                except pyodbc.Error as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥: {e}")
                    await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
                finally:
                    conn.close()
        elif callback_query.data == "additional_services":
            telegram_id = callback_query.from_user.id
            conn = connect_to_db()
            if conn:
                try:
                    cursor = conn.cursor()
                    cursor.execute("SELECT guest_id FROM Guests WHERE telegram_id = ? AND check_out_date >= GETDATE()", (telegram_id,))
                    booking = cursor.fetchone()
                    if booking:
                        await show_services_list(callback_query.message, state)
                    else:
                        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏.")
                except pyodbc.Error as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
                finally:
                    conn.close()
            else:
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        elif callback_query.data.startswith("select_service_"):
            service_id = int(callback_query.data.split("_")[2])
            await state.update_data(selected_service_id=service_id)
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:")
            await state.set_state(OrderServiceState.waiting_for_quantity)
        elif callback_query.data == "back_to_main":
            await start(callback_query.message)
        elif callback_query.data in ["reviews", "tech_support"]:
            await callback_query.message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        elif callback_query.data == "broadcast":
            if is_admin(callback_query.from_user.id):
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_broadcast")],
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_apanel")]
                ])
                await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            else:
                await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        elif callback_query.data == "start_broadcast":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
            await state.set_state(AdminState.waiting_for_broadcast)
        elif callback_query.data == "DB":
            if is_admin(callback_query.from_user.id):
                await show_db_menu(chat_id)
            else:
                await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        elif callback_query.data == "db_users":
            await show_users_menu(chat_id)
        elif callback_query.data == "view_users":
            await view_db_users(chat_id)
        elif callback_query.data == "add_user":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\ntelegram_id, first_name, last_name, username, admin(0 –∏–ª–∏ 1)")
            await state.set_state(DBAdminState.waiting_for_add_user)
        elif callback_query.data == "edit_user":
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", callback_data="edit_user_text")],
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ GUI", callback_data="edit_user_gui")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        elif callback_query.data == "edit_user_text":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\ntelegram_id, admin(0 –∏–ª–∏ 1)")
            await state.set_state(DBAdminState.waiting_for_edit_user)
        elif callback_query.data == "edit_user_gui":
            await show_users_for_edit(chat_id)
        elif callback_query.data.startswith("edit_user_gui_"):
            telegram_id = callback_query.data.split("_")[3]
            conn = connect_to_db()
            if conn:
                try:
                    cursor = conn.cursor()
                    cursor.execute("SELECT admin FROM Users WHERE telegram_id = ?", (telegram_id,))
                    result = cursor.fetchone()
                    if result:
                        current_admin = result[0]
                        new_admin = 0 if current_admin == 1 else 1
                        if edit_user_db(telegram_id, new_admin):
                            status_text = "–Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" if new_admin == 1 else "—Å–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∫–∞"
                            await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Ç–µ–ø–µ—Ä—å {status_text}.")
                        else:
                            await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    else:
                        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                finally:
                    conn.close()
        elif callback_query.data == "delete_user_menu":
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="delete_user_gui")],
                [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ ID", callback_data="delete_user_id")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        elif callback_query.data == "delete_user_id":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(DBAdminState.waiting_for_delete_user)
        elif callback_query.data == "delete_user_gui":
            await show_users_for_delete(chat_id)
        elif callback_query.data.startswith("delete_user_"):
            telegram_id = callback_query.data.split("_")[2]
            if delete_user_db(telegram_id):
                await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–¥–∞–ª—ë–Ω.")
            else:
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        elif callback_query.data == "db_rooms":
            await show_rooms_menu(chat_id)
        elif callback_query.data == "view_rooms":
            await view_db_rooms(chat_id)
        elif callback_query.data == "add_room":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\ncategory, description, price, quantity, status")
            await state.set_state(DBAdminState.waiting_for_add_room)
        elif callback_query.data == "edit_room":
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", callback_data="edit_room_text")],
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ GUI", callback_data="edit_room_gui")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞:", reply_markup=markup)
        elif callback_query.data == "edit_room_text":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nroom_id, category, description, price, quantity, status")
            await state.set_state(DBAdminState.waiting_for_edit_room)
        elif callback_query.data == "edit_room_gui":
            await show_rooms_for_edit(chat_id)
        elif callback_query.data.startswith("edit_room_gui_"):
            room_id = callback_query.data.split("_")[3]
            await state.update_data(edit_room_id=room_id)
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_room_category")],
                [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_room_description")],
                [InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data="edit_room_price")],
                [InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_room_quantity")],
                [InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å", callback_data="edit_room_status")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ ID {room_id}:", reply_markup=markup)
        elif callback_query.data == "edit_room_category":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
            await state.set_state(DBAdminState.waiting_for_room_edit_gui)
            await state.update_data(edit_field="category")
        elif callback_query.data == "edit_room_description":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            await state.set_state(DBAdminState.waiting_for_room_edit_gui)
            await state.update_data(edit_field="description")
        elif callback_query.data == "edit_room_price":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
            await state.set_state(DBAdminState.waiting_for_room_edit_gui)
            await state.update_data(edit_field="price")
        elif callback_query.data == "edit_room_quantity":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
            await state.set_state(DBAdminState.waiting_for_room_edit_gui)
            await state.update_data(edit_field="quantity")
        elif callback_query.data == "edit_room_status":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
            await state.set_state(DBAdminState.waiting_for_room_edit_gui)
            await state.update_data(edit_field="status")
        elif callback_query.data == "delete_room_menu":
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="delete_room_gui")],
                [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ ID", callback_data="delete_room_id")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞:", reply_markup=markup)
        elif callback_query.data == "delete_room_id":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ room_id –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(DBAdminState.waiting_for_delete_room)
        elif callback_query.data == "delete_room_gui":
            await show_rooms_for_delete(chat_id)
        elif callback_query.data.startswith("delete_room_"):
            room_id = callback_query.data.split("_")[2]
            if delete_room_db(room_id):
                await callback_query.message.answer(f"–ù–æ–º–µ—Ä {room_id} —É–¥–∞–ª—ë–Ω.")
            else:
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞.")
        elif callback_query.data == "db_images":
            await show_images_menu(chat_id)
        elif callback_query.data == "view_images":
            await view_db_images(chat_id)
        elif callback_query.data == "add_image":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nroom_id, image_url")
            await state.set_state(DBAdminState.waiting_for_add_image)
        elif callback_query.data == "edit_image":
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", callback_data="edit_image_text")],
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ GUI", callback_data="edit_image_gui")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=markup)
        elif callback_query.data == "edit_image_text":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nroom_id, old_image_url, new_image_url")
            await state.set_state(DBAdminState.waiting_for_edit_image)
        elif callback_query.data == "edit_image_gui":
            await show_images_for_edit(chat_id)
        elif callback_query.data.startswith("edit_image_gui_"):
            parts = callback_query.data.split("_")
            room_id = parts[3]
            old_url = "_".join(parts[4:])
            await state.update_data(edit_image_room_id=room_id, edit_image_old_url=old_url)
            await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã ID {room_id}:")
            await state.set_state(DBAdminState.waiting_for_image_edit_gui)
        elif callback_query.data == "delete_image_menu":
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="delete_image_gui")],
                [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ room_id –∏ URL", callback_data="delete_image_id")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=markup)
        elif callback_query.data == "delete_image_id":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nroom_id, image_url")
            await state.set_state(DBAdminState.waiting_for_delete_image)
        elif callback_query.data == "delete_image_gui":
            await show_rooms_for_image_delete(chat_id)
        elif callback_query.data.startswith("select_room_image_"):
            room_id = callback_query.data.split("_")[3]
            await show_images_for_delete(chat_id, room_id)
        elif callback_query.data.startswith("delete_image_"):
            parts = callback_query.data.split("_", 3)
            room_id = parts[2]
            image_url = parts[3]
            if delete_image_db(room_id, image_url):
                await callback_query.message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_url} –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ID {room_id} —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        elif callback_query.data == "db_guests":
            await show_guests_menu(chat_id)
        elif callback_query.data == "view_guests":
            await view_db_guests(chat_id)
        elif callback_query.data == "add_guest":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nroom_id, telegram_id, first_name, last_name, email, phone, check_in_date, check_out_date, comment")
            await state.set_state(DBAdminState.waiting_for_add_guest)
        elif callback_query.data == "edit_guest":
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", callback_data="edit_guest_text")],
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ GUI", callback_data="edit_guest_gui")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Å—Ç—è:", reply_markup=markup)
        elif callback_query.data == "edit_guest_text":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Å—Ç—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nguest_id, field1=value1, field2=value2, ...")
            await state.set_state(DBAdminState.waiting_for_edit_guest)
        elif callback_query.data == "edit_guest_gui":
            await show_guests_for_edit(chat_id)
        elif callback_query.data.startswith("edit_guest_gui_"):
            guest_id = callback_query.data.split("_")[3]
            await state.update_data(edit_guest_id=guest_id)
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="Room ID", callback_data="edit_guest_room_id")],
                [InlineKeyboardButton(text="Telegram ID", callback_data="edit_guest_telegram_id")],
                [InlineKeyboardButton(text="–ò–º—è", callback_data="edit_guest_first_name")],
                [InlineKeyboardButton(text="–§–∞–º–∏–ª–∏—è", callback_data="edit_guest_last_name")],
                [InlineKeyboardButton(text="Email", callback_data="edit_guest_email")],
                [InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_guest_phone")],
                [InlineKeyboardButton(text="–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", callback_data="edit_guest_check_in_date")],
                [InlineKeyboardButton(text="–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", callback_data="edit_guest_check_out_date")],
                [InlineKeyboardButton(text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="edit_guest_comment")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Å—Ç—è ID {guest_id}:", reply_markup=markup)
        elif callback_query.data == "edit_guest_room_id":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π room_id:")
            await state.set_state(DBAdminState.waiting_for_guest_edit_gui)
            await state.update_data(edit_field="room_id")
        elif callback_query.data == "edit_guest_telegram_id":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π telegram_id:")
            await state.set_state(DBAdminState.waiting_for_guest_edit_gui)
            await state.update_data(edit_field="telegram_id")
        elif callback_query.data == "edit_guest_first_name":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
            await state.set_state(DBAdminState.waiting_for_guest_edit_gui)
            await state.update_data(edit_field="first_name")
        elif callback_query.data == "edit_guest_last_name":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")
            await state.set_state(DBAdminState.waiting_for_guest_edit_gui)
            await state.update_data(edit_field="last_name")
        elif callback_query.data == "edit_guest_email":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
            await state.set_state(DBAdminState.waiting_for_guest_edit_gui)
            await state.update_data(edit_field="email")
        elif callback_query.data == "edit_guest_phone":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:")
            await state.set_state(DBAdminState.waiting_for_guest_edit_gui)
            await state.update_data(edit_field="phone")
        elif callback_query.data == "edit_guest_check_in_date":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
            await state.set_state(DBAdminState.waiting_for_guest_edit_gui)
            await state.update_data(edit_field="check_in_date")
        elif callback_query.data == "edit_guest_check_out_date":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
            await state.set_state(DBAdminState.waiting_for_guest_edit_gui)
            await state.update_data(edit_field="check_out_date")
        elif callback_query.data == "edit_guest_comment":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
            await state.set_state(DBAdminState.waiting_for_guest_edit_gui)
            await state.update_data(edit_field="comment")
        elif callback_query.data == "delete_guest_menu":
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="delete_guest_gui")],
                [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ ID", callback_data="delete_guest_id")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Å—Ç—è:", reply_markup=markup)
        elif callback_query.data == "delete_guest_id":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ guest_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            await state.set_state(DBAdminState.waiting_for_delete_guest)
        elif callback_query.data == "delete_guest_gui":
            await show_guests_for_delete(chat_id)
        elif callback_query.data.startswith("delete_guest_"):
            guest_id = callback_query.data.split("_")[2]
            conn = connect_to_db()
            if conn:
                try:
                    cursor = conn.cursor()
                    cursor.execute("DELETE FROM Guests WHERE guest_id = ?", (guest_id,))
                    conn.commit()
                    if cursor.rowcount > 0:
                        await callback_query.message.answer(f"–ì–æ—Å—Ç—å {guest_id} —É–¥–∞–ª—ë–Ω.")
                    else:
                        await callback_query.message.answer("–ì–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except pyodbc.Error as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ—Å—Ç—è: {e}")
                    await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ—Å—Ç—è.")
                finally:
                    conn.close()
        elif callback_query.data == "db_services":
            await show_services_menu(chat_id)
        elif callback_query.data == "view_services":
            await view_db_services(chat_id)
        elif callback_query.data == "add_service":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nname, price, short_description, detailed_description")
            await state.set_state(DBAdminState.waiting_for_add_service)
        elif callback_query.data == "edit_service":
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", callback_data="edit_service_text")],
                [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ GUI", callback_data="edit_service_gui")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏:", reply_markup=markup)
        elif callback_query.data == "edit_service_text":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —É—Å–ª—É–≥–∏ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nservice_id, name, price, short_description, detailed_description")
            await state.set_state(DBAdminState.waiting_for_edit_service)
        elif callback_query.data == "edit_service_gui":
            await show_services_for_edit(chat_id)
        elif callback_query.data.startswith("edit_service_gui_"):
            service_id = callback_query.data.split("_")[3]
            await state.update_data(edit_service_id=service_id)
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_service_name")],
                [InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data="edit_service_price")],
                [InlineKeyboardButton(text="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_service_short_desc")],
                [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_service_detailed_desc")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
            ])
            await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ ID {service_id}:", reply_markup=markup)
        elif callback_query.data == "edit_service_name":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            await state.set_state(DBAdminState.waiting_for_service_edit_gui)
            await state.update_data(edit_field="name")
        elif callback_query.data == "edit_service_price":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
            await state.set_state(DBAdminState.waiting_for_service_edit_gui)
            await state.update_data(edit_field="price")
        elif callback_query.data == "edit_service_short_desc":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            await state.set_state(DBAdminState.waiting_for_service_edit_gui)
            await state.update_data(edit_field="short_description")
        elif callback_query.data == "edit_service_detailed_desc":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            await state.set_state(DBAdminState.waiting_for_service_edit_gui)
            await state.update_data(edit_field="detailed_description")
        elif callback_query.data == "delete_service":
            await show_services_for_delete(chat_id)
        elif callback_query.data.startswith("delete_service_"):
            service_id = callback_query.data.split("_")[2]
            if delete_service_db(service_id):
                await callback_query.message.answer(f"–£—Å–ª—É–≥–∞ ID {service_id} —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
        elif callback_query.data == "db_guest_services":
            await show_guest_services_menu(chat_id)
        elif callback_query.data == "view_guest_services":
            await view_db_guest_services(chat_id)
        elif callback_query.data == "add_guest_service":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ GuestServices –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nguest_id, service_id, quantity, status")
            await state.set_state(DBAdminState.waiting_for_add_guest_service)
        elif callback_query.data == "edit_guest_service":
            await show_guest_services_for_edit(chat_id)
        elif callback_query.data.startswith("edit_gs_"):
            try:
                parts = callback_query.data.split("_")
                logging.info(f"callback_data for edit_gs_: {callback_query.data}")
                if len(parts) >= 5:  # –í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    guest_id = int(parts[2])
                    service_id = int(parts[3])
                    order_date_str = parts[4]
                    order_date = datetime.fromisoformat(order_date_str)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    await state.update_data(
                        edit_guest_id=guest_id,
                        edit_service_id=service_id,
                        edit_order_date=order_date
                    )
                    markup = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_gs_quantity")],
                        [InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å", callback_data="edit_gs_status")],
                        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_DB_menu")]
                    ])
                    await callback_query.message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ (–ì–æ—Å—Ç—å: {guest_id}, –£—Å–ª—É–≥–∞: {service_id}, –î–∞—Ç–∞: {order_date}):",
                        reply_markup=markup
                    )
                elif callback_query.data == "edit_gs_quantity":
                    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
                    await state.set_state(DBAdminState.waiting_for_guest_service_edit_gui)
                    await state.update_data(edit_field="quantity")
                elif callback_query.data == "edit_gs_status":
                    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
                    await state.set_state(DBAdminState.waiting_for_guest_service_edit_gui)
                    await state.update_data(edit_field="status")
                else:
                    raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            except (ValueError, IndexError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                await callback_query.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        elif callback_query.data == "edit_gs_quantity":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
            await state.set_state(DBAdminState.waiting_for_guest_service_edit_gui)
            await state.update_data(edit_field="quantity")
        elif callback_query.data == "edit_gs_status":
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
            await state.set_state(DBAdminState.waiting_for_guest_service_edit_gui)
            await state.update_data(edit_field="status")
        elif callback_query.data == "delete_guest_service":
            await show_guest_services_for_delete(chat_id)
        elif callback_query.data.startswith("delete_gs_"):
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞
                parts = callback_query.data.split("_")
                logging.info(f"callback_data for delete_gs_: {callback_query.data}")
                if len(parts) < 5:
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
                guest_id = int(parts[2])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                service_id = int(parts[3])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
                order_date_str = parts[4]
                order_date = datetime.fromisoformat(order_date_str)
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Å —Ç—Ä–µ–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                if delete_guest_service_db(guest_id, service_id, order_date):
                    await callback_query.message.answer(
                        f"–ó–∞–ø–∏—Å—å (–ì–æ—Å—Ç—å: {guest_id}, –£—Å–ª—É–≥–∞: {service_id}, –î–∞—Ç–∞: {order_date}) —É–¥–∞–ª–µ–Ω–∞."
                    )
                else:
                    await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
            except (ValueError, IndexError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                await callback_query.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.")
            except pyodbc.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ GuestServices: {e}")
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
        elif callback_query.data == "back_to_apanel":
            await admin_panel(callback_query.message)
        elif callback_query.data == "admin_panel":
            await admin_panel(callback_query.message)
        elif callback_query.data == "back_to_DB_menu":
            await show_db_menu(chat_id)
        elif callback_query.data == "skip_email":
            await state.update_data(email=None)
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_phone")]]))
            await state.set_state(BookingState.waiting_for_phone)
        elif callback_query.data == "skip_phone":
            await state.update_data(phone=None)
            await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
            await state.set_state(BookingState.waiting_for_check_in_date)
        elif callback_query.data == "skip_comment":
            await finalize_booking(callback_query.message, state, None)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π Users
@dp.message(DBAdminState.waiting_for_add_user)
async def process_add_user(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 5:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: telegram_id, first_name, last_name, username, admin(0 –∏–ª–∏ 1)")
            return
        telegram_id, first_name, last_name, username, admin = parts
        telegram_id = int(telegram_id)
        admin = int(admin)
        if add_user_db(telegram_id, first_name, last_name, username, admin):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_edit_user)
async def process_edit_user(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 2:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: telegram_id, admin(0 –∏–ª–∏ 1)")
            return
        telegram_id, admin = parts
        telegram_id = int(telegram_id)
        admin = int(admin)
        if edit_user_db(telegram_id, admin):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_delete_user)
async def process_delete_user(message: types.Message, state: FSMContext):
    try:
        telegram_id = int(message.text.strip())
        if delete_user_db(telegram_id):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π Rooms
@dp.message(DBAdminState.waiting_for_add_room)
async def process_add_room(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 5:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: category, description, price, quantity, status")
            return
        category, description, price, quantity, status = parts
        price = float(price)
        quantity = int(quantity)
        if add_room_db(category, description, price, quantity, status):
            await message.answer("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_edit_room)
async def process_edit_room(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 6:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: room_id, category, description, price, quantity, status")
            return
        room_id, category, description, price, quantity, status = parts
        room_id = int(room_id)
        price = float(price)
        quantity = int(quantity)
        if edit_room_db(room_id, category, description, price, quantity, status):
            await message.answer("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_room_edit_gui)
async def process_room_edit_gui(message: types.Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    room_id = data.get("edit_room_id")
    field = data.get("edit_field")
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            if field == "category":
                cursor.execute("UPDATE Rooms SET category = ? WHERE room_id = ?", (new_value, room_id))
            elif field == "description":
                cursor.execute("UPDATE Rooms SET description = ? WHERE room_id = ?", (new_value, room_id))
            elif field == "price":
                cursor.execute("UPDATE Rooms SET price = ? WHERE room_id = ?", (float(new_value), room_id))
            elif field == "quantity":
                cursor.execute("UPDATE Rooms SET quantity = ? WHERE room_id = ?", (int(new_value), room_id))
            elif field == "status":
                cursor.execute("UPDATE Rooms SET status = ? WHERE room_id = ?", (new_value, room_id))
            conn.commit()
            await message.answer(f"–ü–æ–ª–µ '{field}' –¥–ª—è –Ω–æ–º–µ—Ä–∞ ID {room_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—è {field} –¥–ª—è –Ω–æ–º–µ—Ä–∞ ID {room_id}: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—è.")
        finally:
            conn.close()
    await state.clear()

@dp.message(DBAdminState.waiting_for_delete_room)
async def process_delete_room(message: types.Message, state: FSMContext):
    try:
        room_id = int(message.text.strip())
        if delete_room_db(room_id):
            await message.answer("–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π RoomImages
@dp.message(DBAdminState.waiting_for_add_image)
async def process_add_image(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 2:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: room_id, image_url")
            return
        room_id, image_url = parts
        room_id = int(room_id)
        if add_image_db(room_id, image_url):
            await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_edit_image)
async def process_edit_image(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 3:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: room_id, old_image_url, new_image_url")
            return
        room_id, old_url, new_url = parts
        room_id = int(room_id)
        if edit_image_db(room_id, old_url, new_url):
            await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_image_edit_gui)
async def process_image_edit_gui(message: types.Message, state: FSMContext):
    new_url = message.text.strip()
    data = await state.get_data()
    room_id = data.get("edit_image_room_id")
    old_url = data.get("edit_image_old_url")
    if edit_image_db(room_id, old_url, new_url):
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    await state.clear()

@dp.message(DBAdminState.waiting_for_delete_image)
async def process_delete_image(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 2:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: room_id, image_url")
            return
        room_id, image_url = parts
        room_id = int(room_id)
        if delete_image_db(room_id, image_url):
            await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π Guests
@dp.message(DBAdminState.waiting_for_add_guest)
async def process_add_guest(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 9:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: room_id, telegram_id, first_name, last_name, email, phone, check_in_date, check_out_date, comment")
            return
        room_id, telegram_id, first_name, last_name, email, phone, check_in_date, check_out_date, comment = parts
        room_id = int(room_id)
        telegram_id = int(telegram_id)
        email = email if email else None
        phone = phone if phone else None
        comment = comment if comment else None
        conn = connect_to_db()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute(
                    """
                    INSERT INTO Guests (room_id, telegram_id, first_name, last_name, email, phone, check_in_date, check_out_date, comment, booking_date)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, GETDATE())
                    """,
                    (room_id, telegram_id, first_name, last_name, email, phone, check_in_date, check_out_date, comment)
                )
                conn.commit()
                await message.answer("–ì–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            except pyodbc.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Å—Ç—è: {e}")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Å—Ç—è.")
            finally:
                conn.close()
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Å—Ç—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_edit_guest)
async def process_edit_guest(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) < 2:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: guest_id, field1=value1, field2=value2, ...")
            return
        guest_id = int(parts[0])
        updates = {}
        for part in parts[1:]:
            if "=" not in part:
                await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {part}")
                return
            field, value = part.split("=", 1)
            field = field.strip()
            value = value.strip() or None
            if field not in ["room_id", "telegram_id", "first_name", "last_name", "email", "phone", "check_in_date", "check_out_date", "comment"]:
                await message.answer(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ: {field}")
                return
            updates[field] = value
        if not updates:
            await message.answer("–ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return
        conn = connect_to_db()
        if conn:
            try:
                cursor = conn.cursor()
                set_clause = ", ".join([f"{field} = ?" for field in updates])
                values = list(updates.values()) + [guest_id]
                query = f"UPDATE Guests SET {set_clause} WHERE guest_id = ?"
                cursor.execute(query, values)
                conn.commit()
                if cursor.rowcount > 0:
                    await message.answer("–ì–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
                else:
                    await message.answer("–ì–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except pyodbc.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ—Å—Ç—è: {e}")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ—Å—Ç—è.")
            finally:
                conn.close()
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Å—Ç—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_guest_edit_gui)
async def process_guest_edit_gui(message: types.Message, state: FSMContext):
    new_value = message.text.strip() or None
    data = await state.get_data()
    guest_id = data.get("edit_guest_id")
    field = data.get("edit_field")
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            if field == "room_id":
                cursor.execute("UPDATE Guests SET room_id = ? WHERE guest_id = ?", (int(new_value), guest_id))
            elif field == "telegram_id":
                cursor.execute("UPDATE Guests SET telegram_id = ? WHERE guest_id = ?", (int(new_value), guest_id))
            elif field == "first_name":
                cursor.execute("UPDATE Guests SET first_name = ? WHERE guest_id = ?", (new_value, guest_id))
            elif field == "last_name":
                cursor.execute("UPDATE Guests SET last_name = ? WHERE guest_id = ?", (new_value, guest_id))
            elif field == "email":
                cursor.execute("UPDATE Guests SET email = ? WHERE guest_id = ?", (new_value, guest_id))
            elif field == "phone":
                cursor.execute("UPDATE Guests SET phone = ? WHERE guest_id = ?", (new_value, guest_id))
            elif field == "check_in_date":
                cursor.execute("UPDATE Guests SET check_in_date = ? WHERE guest_id = ?", (new_value, guest_id))
            elif field == "check_out_date":
                cursor.execute("UPDATE Guests SET check_out_date = ? WHERE guest_id = ?", (new_value, guest_id))
            elif field == "comment":
                cursor.execute("UPDATE Guests SET comment = ? WHERE guest_id = ?", (new_value, guest_id))
            conn.commit()
            await message.answer(f"–ü–æ–ª–µ '{field}' –¥–ª—è –≥–æ—Å—Ç—è ID {guest_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—è {field} –¥–ª—è –≥–æ—Å—Ç—è ID {guest_id}: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—è.")
        finally:
            conn.close()
    await state.clear()

@dp.message(DBAdminState.waiting_for_delete_guest)
async def process_delete_guest(message: types.Message, state: FSMContext):
    try:
        guest_id = int(message.text.strip())
        conn = connect_to_db()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("DELETE FROM Guests WHERE guest_id = ?", (guest_id,))
                conn.commit()
                if cursor.rowcount > 0:
                    await message.answer("–ì–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
                else:
                    await message.answer("–ì–æ—Å—Ç—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except pyodbc.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ—Å—Ç—è: {e}")
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ—Å—Ç—è.")
            finally:
                conn.close()
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Å—Ç—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π Services
@dp.message(DBAdminState.waiting_for_add_service)
async def process_add_service(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 4:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: name, price, short_description, detailed_description")
            return
        name, price, short_description, detailed_description = parts
        price = float(price)
        if add_service_db(name, price, short_description, detailed_description):
            await message.answer("–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_edit_service)
async def process_edit_service(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 5:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: service_id, name, price, short_description, detailed_description")
            return
        service_id, name, price, short_description, detailed_description = parts
        service_id = int(service_id)
        price = float(price)
        if edit_service_db(service_id, name, price, short_description, detailed_description):
            await message.answer("–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_service_edit_gui)
async def process_service_edit_gui(message: types.Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    service_id = data.get("edit_service_id")
    field = data.get("edit_field")
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            if field == "name":
                cursor.execute("UPDATE Services SET name = ? WHERE service_id = ?", (new_value, service_id))
            elif field == "price":
                cursor.execute("UPDATE Services SET price = ? WHERE service_id = ?", (float(new_value), service_id))
            elif field == "short_description":
                cursor.execute("UPDATE Services SET short_description = ? WHERE service_id = ?", (new_value, service_id))
            elif field == "detailed_description":
                cursor.execute("UPDATE Services SET detailed_description = ? WHERE service_id = ?", (new_value, service_id))
            conn.commit()
            await message.answer(f"–ü–æ–ª–µ '{field}' –¥–ª—è —É—Å–ª—É–≥–∏ ID {service_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—è {field} –¥–ª—è —É—Å–ª—É–≥–∏ ID {service_id}: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—è.")
        finally:
            conn.close()
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π GuestServices
@dp.message(DBAdminState.waiting_for_add_guest_service)
async def process_add_guest_service(message: types.Message, state: FSMContext):
    try:
        parts = [part.strip() for part in message.text.split(",")]
        if len(parts) != 4:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: guest_id, service_id, quantity, status")
            return
        guest_id, service_id, quantity, status = parts
        guest_id = int(guest_id)
        service_id = int(service_id)
        quantity = int(quantity)
        if add_guest_service_db(guest_id, service_id, quantity, status):
            await message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ GuestServices.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ GuestServices: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        await state.clear()

@dp.message(DBAdminState.waiting_for_guest_service_edit_gui)
async def process_guest_service_edit_gui(message: types.Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    guest_id = data.get("edit_guest_id")
    service_id = data.get("edit_service_id")
    order_date = data.get("edit_order_date")
    field = data.get("edit_field")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    if not all([guest_id, service_id, order_date, field]):
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        if field == "quantity":
            new_value = int(new_value)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ quantity ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        if edit_guest_service_db(guest_id, service_id, order_date, field, new_value):
            await message.answer(f"–ü–æ–ª–µ '{field}' –¥–ª—è –∑–∞–ø–∏—Å–∏ (–ì–æ—Å—Ç—å: {guest_id}, –£—Å–ª—É–≥–∞: {service_id}, –î–∞—Ç–∞: {order_date}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—è.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è '{field}' ({e}).")
    except pyodbc.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GuestServices: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
@dp.message(OrderServiceState.waiting_for_quantity)
async def process_service_quantity(message: types.Message, state: FSMContext):
    quantity = message.text.strip()
    if not quantity.isdigit() or int(quantity) <= 0:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    quantity = int(quantity)
    data = await state.get_data()
    service_id = data['selected_service_id']
    telegram_id = message.from_user.id
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT guest_id FROM Guests WHERE telegram_id = ? AND check_out_date >= GETDATE()", (telegram_id,))
            guest = cursor.fetchone()
            if guest:
                guest_id = guest.guest_id
                cursor.execute(
                    "INSERT INTO GuestServices (guest_id, service_id, quantity, order_date, status) VALUES (?, ?, ?, GETDATE(), 'pending')",
                    (guest_id, service_id, quantity)
                )
                conn.commit()
                await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —É—Å–ª—É–≥—É —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω.")
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥.")
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —É—Å–ª—É–≥–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —É—Å–ª—É–≥–∏.")
        finally:
            conn.close()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(AdminState.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext):
    text = message.text
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT telegram_id FROM Users")
            users = cursor.fetchall()
            for user in users:
                try:
                    await bot.send_message(user.telegram_id, text)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.")
        finally:
            conn.close()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /apanel
@dp.message(Command("apanel"))
async def admin_panel(message: types.Message):
    telegram_id = message.from_user.id
    if not is_admin(telegram_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î", callback_data="DB")]
    ])
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(BookingState.waiting_for_first_name)
async def process_first_name(message: types.Message, state: FSMContext):
    first_name = message.text.strip()
    if not first_name.isalpha():
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(first_name=first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(BookingState.waiting_for_last_name)

@dp.message(BookingState.waiting_for_last_name)
async def process_last_name(message: types.Message, state: FSMContext):
    last_name = message.text.strip()
    if not last_name.isalpha():
        await message.answer("–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(last_name=last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_email")]]))
    await state.set_state(BookingState.waiting_for_email)

@dp.message(BookingState.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip() or None
    await state.update_data(email=email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_phone")]]))
    await state.set_state(BookingState.waiting_for_phone)

@dp.message(BookingState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip() or None
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(BookingState.waiting_for_check_in_date)

@dp.message(BookingState.waiting_for_check_in_date)
async def process_check_in_date(message: types.Message, state: FSMContext):
    check_in_date = message.text.strip()
    try:
        check_in = datetime.strptime(check_in_date, "%Y-%m-%d")
        today = datetime.today().date()
        one_year_later = today + timedelta(days=365)
        if check_in.date() < today or check_in.date() > one_year_later:
            await message.answer("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –¥–æ –≥–æ–¥–∞ –≤–ø–µ—Ä–µ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(check_in_date=check_in_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(BookingState.waiting_for_check_out_date)

@dp.message(BookingState.waiting_for_check_out_date)
async def process_check_out_date(message: types.Message, state: FSMContext):
    check_out_date = message.text.strip()
    try:
        check_out = datetime.strptime(check_out_date, "%Y-%m-%d")
        data = await state.get_data()
        check_in = datetime.strptime(data['check_in_date'], "%Y-%m-%d")
        today = datetime.today().date()
        one_year_later = today + timedelta(days=365)
        if check_out <= check_in or check_out.date() > one_year_later:
            await message.answer("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏ –Ω–µ –±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –≥–æ–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    await state.update_data(check_out_date=check_out_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]))
    await state.set_state(BookingState.waiting_for_comment)

@dp.message(BookingState.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    comment = message.text.strip() or None
    await finalize_booking(message, state, comment)

async def finalize_booking(message: types.Message, state: FSMContext, comment: str | None):
    data = await state.get_data()
    room_id = data['room_id']
    telegram_id = data['telegram_id']
    first_name = data['first_name']
    last_name = data['last_name']
    email = data.get('email')
    phone = data.get('phone')
    check_in_date = data['check_in_date']
    check_out_date = data['check_out_date']
    conn = connect_to_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT quantity, category FROM Rooms WHERE room_id = ? AND status = 'available'", (room_id,))
            result = cursor.fetchone()
            if result and result.quantity > 0:
                category = result.category
                cursor.execute(
                    """
                    INSERT INTO Guests (room_id, telegram_id, first_name, last_name, email, phone, check_in_date, check_out_date, comment, booking_date)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, GETDATE())
                    """,
                    (room_id, telegram_id, first_name, last_name, email, phone, check_in_date, check_out_date, comment)
                )
                cursor.execute("UPDATE Rooms SET quantity = quantity - 1 WHERE room_id = ?", (room_id,))
                conn.commit()
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")],
                    [InlineKeyboardButton(text="–î–æ–ø —É—Å–ª—É–≥–∏", callback_data="additional_services")]
                ])
                await message.answer(
                    "<b>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</b>\n\n"
                    "<b>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
                    f"üè® <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–º–µ—Ä–∞:</b> {category}\n"
                    f"üë§ <b>–ò–º—è:</b> {first_name} {last_name}\n"
                    f"üìÖ <b>–ó–∞–µ–∑–¥:</b> {check_in_date}\n"
                    f"üìÖ <b>–í—ã–µ–∑–¥:</b> {check_out_date}",
                    parse_mode="HTML",
                    reply_markup=markup
                )
            else:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.")
        except pyodbc.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        finally:
            conn.close()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    await state.clear()

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())